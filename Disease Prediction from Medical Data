{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMEYGZTmMZvl9nFIFKXrwRY",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/mansoorshakeel0-stack/CodeAlpha_ProjectName/blob/main/Disease%20Prediction%20from%20Medical%20Data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Import Necessary Libraries"
      ],
      "metadata": {
        "id": "TjcbmrdqRzQT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, confusion_matrix, roc_auc_score\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "QS-AYD2FR_n_"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Load dataset from UCI"
      ],
      "metadata": {
        "id": "B_4hZ-MISDI9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "url = \"https://raw.githubusercontent.com/plotly/datasets/master/diabetes.csv\"\n",
        "df = pd.read_csv(url)\n",
        "\n",
        "print(\"Shape:\", df.shape)\n",
        "print(df.head())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mCJS_guwSt7B",
        "outputId": "2fc5fbb0-9ef7-4ea2-d610-405271164d65"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Shape: (768, 9)\n",
            "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
            "0            6      148             72             35        0  33.6   \n",
            "1            1       85             66             29        0  26.6   \n",
            "2            8      183             64              0        0  23.3   \n",
            "3            1       89             66             23       94  28.1   \n",
            "4            0      137             40             35      168  43.1   \n",
            "\n",
            "   DiabetesPedigreeFunction  Age  Outcome  \n",
            "0                     0.627   50        1  \n",
            "1                     0.351   31        0  \n",
            "2                     0.672   32        1  \n",
            "3                     0.167   21        0  \n",
            "4                     2.288   33        1  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Split features and target"
      ],
      "metadata": {
        "id": "iH9sxR6mS-fB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X = df.drop('Outcome', axis=1)\n",
        "y = df['Outcome']"
      ],
      "metadata": {
        "id": "CIuarEmYTEXB"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train-test split"
      ],
      "metadata": {
        "id": "Yh1zm3iMTZx0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    X, y, test_size=0.25, random_state=42, stratify=y\n",
        ")"
      ],
      "metadata": {
        "id": "b-A-TEO4TaZ4"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Standardize features"
      ],
      "metadata": {
        "id": "MqLOBcIHTegb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "X_train_scaled = scaler.fit_transform(X_train)\n",
        "X_test_scaled = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "ybbup_rDTgul"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Initialize models"
      ],
      "metadata": {
        "id": "24Is1VOgTkJ3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "models = {\n",
        "    \"Logistic Regression\": LogisticRegression(max_iter=1000),\n",
        "    \"SVM\": SVC(probability=True, kernel='rbf'),\n",
        "    \"Random Forest\": RandomForestClassifier(random_state=42),\n",
        "    \"XGBoost\": XGBClassifier(use_label_encoder=False, eval_metric='logloss', random_state=42)\n",
        "}\n"
      ],
      "metadata": {
        "id": "SuZzrpo5Tn9u"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Train and evaluate models"
      ],
      "metadata": {
        "id": "rx9sO9A1Ts6j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "results = []\n",
        "for name, model in models.items():\n",
        "    model.fit(X_train_scaled, y_train)\n",
        "    y_pred = model.predict(X_test_scaled)\n",
        "    y_prob = model.predict_proba(X_test_scaled)[:, 1]\n",
        "\n",
        "    print(f\"\\n=== {name} ===\")\n",
        "    print(classification_report(y_test, y_pred))\n",
        "    roc = roc_auc_score(y_test, y_prob)\n",
        "    results.append({\"Model\": name, \"ROC-AUC\": roc})\n",
        "    print(f\"ROC-AUC: {roc:.3f}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "240VOGPrTvMh",
        "outputId": "57d39696-3fb6-4bba-8c4a-d3dfedd68392"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== Logistic Regression ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.77      0.85      0.81       125\n",
            "           1       0.65      0.52      0.58        67\n",
            "\n",
            "    accuracy                           0.73       192\n",
            "   macro avg       0.71      0.69      0.69       192\n",
            "weighted avg       0.73      0.73      0.73       192\n",
            "\n",
            "ROC-AUC: 0.832\n",
            "\n",
            "=== SVM ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.85      0.82       125\n",
            "           1       0.67      0.57      0.61        67\n",
            "\n",
            "    accuracy                           0.75       192\n",
            "   macro avg       0.73      0.71      0.71       192\n",
            "weighted avg       0.74      0.75      0.74       192\n",
            "\n",
            "ROC-AUC: 0.797\n",
            "\n",
            "=== Random Forest ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.78      0.86      0.82       125\n",
            "           1       0.67      0.55      0.61        67\n",
            "\n",
            "    accuracy                           0.75       192\n",
            "   macro avg       0.73      0.70      0.71       192\n",
            "weighted avg       0.74      0.75      0.74       192\n",
            "\n",
            "ROC-AUC: 0.816\n",
            "\n",
            "=== XGBoost ===\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.79      0.79      0.79       125\n",
            "           1       0.61      0.61      0.61        67\n",
            "\n",
            "    accuracy                           0.73       192\n",
            "   macro avg       0.70      0.70      0.70       192\n",
            "weighted avg       0.73      0.73      0.73       192\n",
            "\n",
            "ROC-AUC: 0.796\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/xgboost/training.py:183: UserWarning: [10:14:28] WARNING: /workspace/src/learner.cc:738: \n",
            "Parameters: { \"use_label_encoder\" } are not used.\n",
            "\n",
            "  bst.update(dtrain, iteration=i, fobj=obj)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model Comparison Summary"
      ],
      "metadata": {
        "id": "WxZwDKp0T38w"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "summary = pd.DataFrame(results).sort_values(by=\"ROC-AUC\", ascending=False)\n",
        "print(\"\\nModel Performance Summary:\\n\", summary)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CmRKk_zfT4bG",
        "outputId": "c2d50564-04aa-4804-b3f9-c46c67c80b12"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Model Performance Summary:\n",
            "                  Model   ROC-AUC\n",
            "0  Logistic Regression  0.832000\n",
            "2        Random Forest  0.816119\n",
            "1                  SVM  0.797015\n",
            "3              XGBoost  0.796060\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Plot Comparison"
      ],
      "metadata": {
        "id": "OQG2CMUzT-tm"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8,5))\n",
        "sns.barplot(data=summary, x=\"ROC-AUC\", y=\"Model\", palette=\"Blues_d\")\n",
        "plt.title(\"Model Performance (ROC-AUC)\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 594
        },
        "id": "9n7gK-DXUA6J",
        "outputId": "53238079-4d0a-4fdb-80f0-29d09f216db2"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/tmp/ipython-input-285360298.py:2: FutureWarning: \n",
            "\n",
            "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
            "\n",
            "  sns.barplot(data=summary, x=\"ROC-AUC\", y=\"Model\", palette=\"Blues_d\")\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Predictions on New patient ==>"
      ],
      "metadata": {
        "id": "3_8O05jIV4zS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Example patient data (same order as dataset columns)\n",
        "\n",
        "new_patient = np.array([[6, 148, 72, 35, 0, 33.6, 0.627, 50]])\n",
        "new_patient_scaled = scaler.transform(new_patient)\n",
        "\n",
        "\n",
        "prediction = models[\"Logistic Regression\"].predict(new_patient_scaled)\n",
        "print(\"🩺 Prediction:\", \"Diabetes\" if prediction[0]==1 else \"No Diabetes\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bCRYL3s4Uu1J",
        "outputId": "800ffca7-5181-42a5-bb6c-40739e8e4b86"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "🩺 Prediction: Diabetes\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.12/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but StandardScaler was fitted with feature names\n",
            "  warnings.warn(\n"
          ]
        }
      ]
    }
  ]
}